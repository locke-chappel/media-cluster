#https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html
### App Settings
application.applicationId=media-cluster
application.authenticationUrl=
application.keyStore.path=${user.home}/app-data/app.jks
application.keyStore.keytoolPath=keytool
application.media.root=${user.home}/media
application.sessionTimeout=365d
application.sliceLength=1000

#
# In a more secure deployment environment you may wish to place the key and config
# files in ${user.home}/ephemeral/key and ${user.home}/ephemeral/config instead; 
# however, doing so typically requires injecting these files into the internal
# volume only. For the less paranoid (i.e. you are OK with sensitive data being
# stored on disk) then the app-data directory makes life a lot easier.
#
application.ephemeral-ciphers.keyfile=${user.home}/app-data/key
application.ephemeral-ciphers.configfile=${user.home}/app-data/config
    
# Generate new CSRF Token Salt every 24hr (1 minute past midnight)
application.jobs.CsrfTokenSaltJob=0 1 0 ? * *
# Check for Job History to delete every 24hr (1 minute past midnight)
application.jobs.JobHistoryCleanupJob=0 1 0 ? * *
# Check for any jobs that need to be sent to workers
application.jobs.NodeInformJob.enabled=true
application.jobs.NodeInformJob=0 */5 * ? * *
# Check in with active nodes every 30 minutes (:00, :30)
application.jobs.NodeStatusUpdateJob=0 */30 * ? * *
# Cleanup old JWT info every 5 minutes (:00, :05, :10...)
application.jobs.TokenCleanupJob=0 */5 * ? * *

application.l10n.external-path=${user.home}/app-data/l10n

application.services.etag.enabled=true
application.services.minifier.enabled=true

application.ui.caching=true
application.ui.external-path=${user.home}/app-data/static-secure
application.ui.logging.prefix=[Media Scheduler]

### General Server
# WARNING: HTTP Compression can expose the app to BREACH
#          Only use if the app implements XSS, CSRF, CORS, CSP, SameSIte, and other attack protections
server.compression.enabled=true
server.port=8080
#server.address=<ip>
server.ssl.enabled=false
server.ssl.enabled-protocols=TLSv1.3,TLSv1.2
server.ssl.ciphers=TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
server.ssl.keyStoreType=PKCS12
server.ssl.keyAlias=tomcat
server.ssl.key-store=${user.home}/app-data/tls.jks
server.ssl.key-store-password=changeit
server.forward-headers-strategy=framework
spring.servlet.multipart.enabled=false

### Hibernate Config
spring.datasource.drier-class-name=org.h2.driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=false
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

### Logging
#https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging
logging.file.max-size=10MB
logging.file.max-history=10
#logging.pattern.dateformat=yyyy-MM-dd'T'HH:mm:ss.SSSX
#logging.pattern.rolling-file-name=${LOG_FILE}.%d{yyyy-MM-dd}.%i
logging.file.path=${user.home}/app-data/logs

# Default Logger
logging.level.root=ERROR

# Hibernate Loggers
logging.level.org.hibernate=ERROR
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR

# Spring Loggers
logging.level.org.springframework.web=ERROR

### Sessions
# For TLS enabled instances add __Host- to the cookie name (e.g. __Host-media-scheduler)
server.servlet.session.cookie.name=media-scheduler
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=false
# Note: a blank domain means "host only", setting the domain grants subdomains access too
server.servlet.session.cookie.domain=
server.servlet.session.cookie.path=/

### Thymeleaf
spring.thymeleaf.cache=true

### Tomcat
server.tomcat.basedir=${java.io.tmpdir}/tomcat
server.tomcat.max-http-post-size=2MB
server.tomcat.max-swallow-size=2MB
